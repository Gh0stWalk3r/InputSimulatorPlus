# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

# trigger:
# - master

pool:
  vmImage: 'VS2017-Win2016'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 'true'

steps:
- task: DotNetCoreInstaller@0
  inputs:
    version: '2.2.101'

- script: |
    dotnet tool install -g GitVersion.Tool --version 4.0.1-beta1-58
    dotnet tool install -g altcover.global
  displayName: 'Install global tools'

- script: dotnet-gitversion /output buildserver
  displayName: 'Run GitVersion.Tool'

# - bash: printenv | sort
#   displayName: 'List environment variables'

- task: DotNetCoreCLI@2
  displayName: 'Build source'
  inputs:
    command: build
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Run tests'
  inputs:
    command: test
    projects: '**/*.Tests.csproj'
    arguments: '--configuration $(buildConfiguration) --no-build'

- powershell: |
    [array]$testAssemblies = Get-ChildItem -Recurse -File -Filter "*.Tests.dll" | Where-Object -Property Directory -Like "*\bin\*"
    $testAssembliesFilter = $testAssemblies.BaseName -join '|'
    foreach ($testAssembly in $testAssemblies) {
      try {
        $assemblyDirectory = $testAssembly.Directory.FullName
        $workingDirectory = Join-Path -Path $assemblyDirectory -ChildPath "..\..\.."
        Push-Location -Path $workingDirectory
        altcover -i "$assemblyDirectory" --opencover -e "xunit|$testAssembliesFilter"
      }
      finally {
        Pop-Location
      }
    }
  displayName: 'Create coverage report'

- powershell: |
    $coverageFile = Get-ChildItem -Path '$(Build.SourcesDirectory)' -Recurse -File -Filter 'coverage.xml' | Select-Object -First 1
    $fullPath = $coverageFile.FullName
    Copy-Item -Path $fullPath -Destination '$(Build.StagingDirectory)'
    & "$ENV:USERPROFILE\.nuget\packages\codecov\1.1.0\tools\codecov.exe" -f "$fullPath" -t '$(CODECOV_TOKEN)'
  displayName: 'Upload coverage to codecov.io'

- task: PublishPipelineArtifact@0
  inputs:
    artifactName: 'coverage.xml'
    targetPath: '$(Build.StagingDirectory)\coverage.xml'
